package org.waynezhou.androidplayground.audio.model

import android.database.Cursor
import android.provider.MediaStore
import androidx.core.database.getStringOrNull
import android.provider.MediaStore.Audio.Media.*

data class AudioModel(
    val albumId: String? = null,
    val artistId: String? = null,
    val bookmark: String? = null,
    val bucketDisplayName: String? = null,
    val bucketId: String? = null,
    val contentType: String? = null,
    val dateAdded: String? = null,
    val dateExpires: String? = null,
    val dateModified: String? = null,
    val dateTaken: String? = null,
    val displayName: String? = null,
    val documentId: String? = null,
    val duration: String? = null,
    val entryContentType: String? = null,
    val extraMaxBytes: String? = null,
    val height: String? = null,
    val instanceId: String? = null,
    val isAlarm: String? = null,
    val isAudiobook: String? = null,
    val isMusic: String? = null,
    val isNotification: String? = null,
    val isPending: String? = null,
    val isPodcast: String? = null,
    val isRingtone: String? = null,
    val mimeType: String? = null,
    val orientation: String? = null,
    val originalDocumentId: String? = null,
    val ownerPackageName: String? = null,
    val recordSoundAction: String? = null,
    val relativePath: String? = null,
    val size: String? = null,
    val title: String? = null,
    val track: String? = null,
    val volumeName: String? = null,
    val width: String? = null,
    val year: String? = null,
){
    companion object{
        val projections = arrayOf(
            //ALBUM,
            //ALBUM_ARTIST,
            //ARTIST,
            //AUTHOR,
            //BITRATE,
            //CAPTURE_FRAMERATE,
            //CD_TRACK_NUMBER,
            //COMPILATION,
            //COMPOSER,
            //DISC_NUMBER,
            //GENERATION_ADDED,
            //GENERATION_MODIFIED,
            //GENRE,
            //GENRE_ID,
            //IS_DOWNLOAD,
            //IS_DRM,
            //IS_FAVORITE,
            //IS_TRASHED,
            //NUM_TRACKS,
            //RESOLUTION,
            //TITLE_RESOURCE_URI,
            //WRITER,
            //XMP,
            ALBUM_ID,
            ARTIST_ID,
            BOOKMARK,
            BUCKET_DISPLAY_NAME,
            BUCKET_ID,
            CONTENT_TYPE,
            DATE_ADDED,
            DATE_EXPIRES,
            DATE_MODIFIED,
            DATE_TAKEN,
            DISPLAY_NAME,
            DOCUMENT_ID,
            DURATION,
            ENTRY_CONTENT_TYPE,
            EXTRA_MAX_BYTES,
            HEIGHT,
            INSTANCE_ID,
            IS_ALARM,
            IS_AUDIOBOOK,
            IS_MUSIC,
            IS_NOTIFICATION,
            IS_PENDING,
            IS_PODCAST,
            IS_RINGTONE,
            MIME_TYPE,
            ORIENTATION,
            ORIGINAL_DOCUMENT_ID,
            OWNER_PACKAGE_NAME,
            RECORD_SOUND_ACTION,
            RELATIVE_PATH,
            SIZE,
            TITLE,
            TRACK,
            VOLUME_NAME,
            WIDTH,
            YEAR,
        )
        val projectionIdxMap = projections.withIndex().associateBy({ it.value }, { it.index })
    }
    constructor(cursor: Cursor):this(
        albumId= cursor.getStringOrNull(projectionIdxMap[ALBUM_ID]!!),
        artistId= cursor.getStringOrNull(projectionIdxMap[ARTIST_ID]!!),
        bookmark= cursor.getStringOrNull(projectionIdxMap[BOOKMARK]!!),
        bucketDisplayName= cursor.getStringOrNull(projectionIdxMap[BUCKET_DISPLAY_NAME]!!),
        bucketId= cursor.getStringOrNull(projectionIdxMap[BUCKET_ID]!!),
        contentType= cursor.getStringOrNull(projectionIdxMap[CONTENT_TYPE]!!),
        dateAdded= cursor.getStringOrNull(projectionIdxMap[DATE_ADDED]!!),
        dateExpires= cursor.getStringOrNull(projectionIdxMap[DATE_EXPIRES]!!),
        dateModified= cursor.getStringOrNull(projectionIdxMap[DATE_MODIFIED]!!),
        dateTaken= cursor.getStringOrNull(projectionIdxMap[DATE_TAKEN]!!),
        displayName= cursor.getStringOrNull(projectionIdxMap[DISPLAY_NAME]!!),
        documentId= cursor.getStringOrNull(projectionIdxMap[DOCUMENT_ID]!!),
        duration= cursor.getStringOrNull(projectionIdxMap[DURATION]!!),
        entryContentType= cursor.getStringOrNull(projectionIdxMap[ENTRY_CONTENT_TYPE]!!),
        extraMaxBytes= cursor.getStringOrNull(projectionIdxMap[EXTRA_MAX_BYTES]!!),
        height= cursor.getStringOrNull(projectionIdxMap[HEIGHT]!!),
        instanceId= cursor.getStringOrNull(projectionIdxMap[INSTANCE_ID]!!),
        isAlarm= cursor.getStringOrNull(projectionIdxMap[IS_ALARM]!!),
        isAudiobook= cursor.getStringOrNull(projectionIdxMap[IS_AUDIOBOOK]!!),
        isMusic= cursor.getStringOrNull(projectionIdxMap[IS_MUSIC]!!),
        isNotification= cursor.getStringOrNull(projectionIdxMap[IS_NOTIFICATION]!!),
        isPending= cursor.getStringOrNull(projectionIdxMap[IS_PENDING]!!),
        isPodcast= cursor.getStringOrNull(projectionIdxMap[IS_PODCAST]!!),
        isRingtone= cursor.getStringOrNull(projectionIdxMap[IS_RINGTONE]!!),
        mimeType= cursor.getStringOrNull(projectionIdxMap[MIME_TYPE]!!),
        orientation= cursor.getStringOrNull(projectionIdxMap[ORIENTATION]!!),
        originalDocumentId= cursor.getStringOrNull(projectionIdxMap[ORIGINAL_DOCUMENT_ID]!!),
        ownerPackageName= cursor.getStringOrNull(projectionIdxMap[OWNER_PACKAGE_NAME]!!),
        recordSoundAction= cursor.getStringOrNull(projectionIdxMap[RECORD_SOUND_ACTION]!!),
        relativePath= cursor.getStringOrNull(projectionIdxMap[RELATIVE_PATH]!!),
        size= cursor.getStringOrNull(projectionIdxMap[SIZE]!!),
        title= cursor.getStringOrNull(projectionIdxMap[TITLE]!!),
        track= cursor.getStringOrNull(projectionIdxMap[TRACK]!!),
        volumeName= cursor.getStringOrNull(projectionIdxMap[VOLUME_NAME]!!),
        width= cursor.getStringOrNull(projectionIdxMap[WIDTH]!!),
        year= cursor.getStringOrNull(projectionIdxMap[YEAR]!!),
    )
}

class AlbumModel{

}

class Genel
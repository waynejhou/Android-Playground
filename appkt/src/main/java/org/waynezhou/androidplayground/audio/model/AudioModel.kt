package org.waynezhou.androidplayground.audio.model

import android.database.Cursor
import android.net.Uri
import android.provider.MediaStore
import androidx.core.database.getStringOrNull
import android.provider.MediaStore.Audio.AudioColumns.*
import androidx.core.database.getIntOrNull
import androidx.core.database.getLongOrNull

data class AudioModel(
    val _id: Long,
    val albumId: Long,
    val artistId: Long,
    val bookmark: String? = null,
    val bucketDisplayName: String,
    val bucketId: String,
    val contentUri: Uri,
    val dateAdded: Long,
    val dateExpires: Long? = null,
    val dateModified: Long,
    val dateTaken: Long? = null,
    val displayName: String,
    val documentId: String? = null,
    val duration: Long = 0,
    val height: Long? = null,
    val instanceId: String? = null,
    val isAlarm: Boolean = false,
    val isAudiobook: Boolean = false,
    val isMusic: Boolean = false,
    val isNotification: Boolean = false,
    val isPending: Boolean = false,
    val isPodcast: Boolean = false,
    val isRingtone: Boolean = false,
    val mimeType: String,
    val orientation: Int? = null,
    val originalDocumentId: String? = null,
    val ownerPackageName: String? = null,
    val relativePath: String? = null,
    val size: Long,
    val title: String? = null,
    val track: Long,
    val volumeName: String,
    val width: Long? = null,
    val year: Long? = null,
) {
    companion object {
        val projections = arrayOf(
            _ID,
            ALBUM_ID,
            ARTIST_ID,
            BOOKMARK,
            BUCKET_DISPLAY_NAME,
            BUCKET_ID,
            DATE_ADDED,
            DATE_EXPIRES,
            DATE_MODIFIED,
            DATE_TAKEN,
            DISPLAY_NAME,
            DOCUMENT_ID,
            DURATION,
            HEIGHT,
            INSTANCE_ID,
            IS_ALARM,
            IS_AUDIOBOOK,
            IS_MUSIC,
            IS_NOTIFICATION,
            IS_PENDING,
            IS_PODCAST,
            IS_RINGTONE,
            MIME_TYPE,
            ORIENTATION,
            ORIGINAL_DOCUMENT_ID,
            OWNER_PACKAGE_NAME,
            RELATIVE_PATH,
            SIZE,
            TITLE,
            TRACK,
            VOLUME_NAME,
            WIDTH,
            YEAR,
        )
        val projectionIdxMap = projections.withIndex().associateBy({ it.value }, { it.index })
    }
    constructor(baseUri: Uri, cursor: Cursor) : this(
        //_count = cursor.getStringOrNull(projectionIdxMap[_COUNT]!!),
        _id = cursor.getLong(projectionIdxMap[_ID]!!),
        albumId = cursor.getLong(projectionIdxMap[ALBUM_ID]!!),
        artistId = cursor.getLong(projectionIdxMap[ARTIST_ID]!!),
        bookmark = cursor.getStringOrNull(projectionIdxMap[BOOKMARK]!!),
        bucketDisplayName = cursor.getString(projectionIdxMap[BUCKET_DISPLAY_NAME]!!),
        bucketId = cursor.getString(projectionIdxMap[BUCKET_ID]!!),
        contentUri = Uri.withAppendedPath(baseUri, cursor.getStringOrNull(projectionIdxMap[_ID]!!)),
        dateAdded = cursor.getLong(projectionIdxMap[DATE_ADDED]!!),
        dateExpires = cursor.getLongOrNull(projectionIdxMap[DATE_EXPIRES]!!),
        dateModified = cursor.getLong(projectionIdxMap[DATE_MODIFIED]!!),
        dateTaken = cursor.getLongOrNull(projectionIdxMap[DATE_TAKEN]!!),
        displayName = cursor.getString(projectionIdxMap[DISPLAY_NAME]!!),
        documentId = cursor.getStringOrNull(projectionIdxMap[DOCUMENT_ID]!!),
        duration = cursor.getLong(projectionIdxMap[DURATION]!!),
        height = cursor.getLongOrNull(projectionIdxMap[HEIGHT]!!),
        instanceId = cursor.getStringOrNull(projectionIdxMap[INSTANCE_ID]!!),
        isAlarm = cursor.getInt(projectionIdxMap[IS_ALARM]!!) != 0,
        isAudiobook = cursor.getInt(projectionIdxMap[IS_AUDIOBOOK]!!) != 0,
        isMusic = cursor.getInt(projectionIdxMap[IS_MUSIC]!!) != 0,
        isNotification = cursor.getInt(projectionIdxMap[IS_NOTIFICATION]!!) != 0,
        isPending = cursor.getInt(projectionIdxMap[IS_PENDING]!!) != 0,
        isPodcast = cursor.getInt(projectionIdxMap[IS_PODCAST]!!) != 0,
        isRingtone = cursor.getInt(projectionIdxMap[IS_RINGTONE]!!) != 0,
        mimeType = cursor.getString(projectionIdxMap[MIME_TYPE]!!),
        orientation = cursor.getIntOrNull(projectionIdxMap[ORIENTATION]!!),
        originalDocumentId = cursor.getStringOrNull(projectionIdxMap[ORIGINAL_DOCUMENT_ID]!!),
        ownerPackageName = cursor.getStringOrNull(projectionIdxMap[OWNER_PACKAGE_NAME]!!),
        relativePath = cursor.getStringOrNull(projectionIdxMap[RELATIVE_PATH]!!),
        size = cursor.getLong(projectionIdxMap[SIZE]!!),
        title = cursor.getStringOrNull(projectionIdxMap[TITLE]!!),
        track = cursor.getLong(projectionIdxMap[TRACK]!!),
        volumeName = cursor.getString(projectionIdxMap[VOLUME_NAME]!!),
        width = cursor.getLongOrNull(projectionIdxMap[WIDTH]!!),
        year = cursor.getLongOrNull(projectionIdxMap[YEAR]!!),
    )
}

class AlbumModel

class Genre